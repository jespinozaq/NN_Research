# -*- coding: utf-8 -*-
"""wineTastingSimpleNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tXBAIFnTda9eaae1CamWy3QWbcBl42pb
"""

import torch
import torch.nn as nn
import matplotlib.pyplot as plt

from torch.autograd import Variable

!head /content/winequality-red.csv

class wineNet(nn.Module):

    def __init__(self, input_size, hidden1_size, hidden2_size, num_Classes):

        super(wineNet, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden1_size)
        self.reLu1 = nn.ReLU()
        self.fc2 = nn.Linear(hidden1_size, hidden2_size)
        self.reLu2 = nn.ReLU()
        self.fc3 = nn.Linear(hidden2_size, num_Classes)

    def forward(self, x):
        out = self.fc1(x)
        out = self.reLu1(out)
        out = self.fc2(out)
        out = self.relu2(out)
        out = self.fc3(out)

        return out

model = wineNet(4,100,50,3)
print(model)

batch_size = 60
wine_data_file = '/content/winequality-red.csv'

train_ds = wine_data_file
test_ds = wine_data_file

print('# of instances in training set: ', len(train_ds))
print('# of instances in testing set: ', len(test_ds))

train_loader = torch.utils.data.DataLoader(dataset=train_ds, batch_size=batch_size, shuffle=True)
test_loader = torch.utils.data.DataLoader(dataset=test_ds, batch_size=batch_size, shuffle=True)

average_loss = []

def train(model, train_data, epochs, word_to_index):