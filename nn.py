# -*- coding: utf-8 -*-
"""NN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wXbJ1780jM_AUs2LhURr5EXt4oPNBkyN
"""

#code structure taken/made with the help of youtube video: https://www.youtube.com/watch?v=Jy4wM2X21u0

import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F

from torch.utils.data import DataLoader
import torchvision.datasets as datasets
import torchvision.transforms as transforms


class NN(nn.Module):
    def __init__(self, input_size, num_classes):
        super(NN, self).__init__()
        self.fc1 = nn.Linear(input_size, 50)
        self.fc2 = nn.Linear(50, num_classes)

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = self.fc2(x)

        return x

#setting device
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

#Hyperparameters
input_size = 1000
num_classes = 100
learning_rate = 0.001
batch_size = 64
num_epochs = 1

#Generating data
x = np.arange(-10,10, .01)
x = x.reshape(-10,10)

y = x**3 + x**2 - x - 1
y = y.reshape(-10,10)

dataset = y

#set apart train testing and normal testing
val_size = int(len(dataset)*0.2)
train_size = len(dataset)- int(len(dataset)*0.2)

train_set, test_set = torch.utils.data.random_split(dataset, [train_size, val_size])
train_loader = DataLoader(dataset=train_set, batch_size=batch_size, shuffle=True)
test_loader = DataLoader(dataset=test_set, batch_size=batch_size, shuffle=True)

#initializing network
model = NN(input_size, num_classes=num_classes).to(device)

#Loss and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

#training network
for epoch in range(num_epochs):
        for batch_idx, (data, targets) in enumerate(train_loader):
            # Get data to cuda if possible
            data = data.to(device=device)
            targets = targets.to(device=device)

            #correct shape
            data = data.reshape(data.shape[0], -1)

            #forward
            scores = model(data)
            loss = criterion(scores, targets)

            #backward
            optimizer.zero_grad()
            loss.backward()

            #gradient descent
            optimizer.step()

def check_accuracy(loader, model):
    num_correct = 0
    num_samples = 0
    model.eval()

    with torch.no_grad():
        for x, y in loader:
            x = x.to(device=device)
            y = y.to(device=device)
            x = x.reshape(x.shape[0], -1)

            scores = model(x)
            _, predictions = scores.max(1)
            num_correct += (predictions == y).sum()
            num_samples += predictions.size(0)

            accuracy = float(num_correct/num_samples)*100
            print('Accuracy: ',accuracy)

            model.train()
            return accuracy
check_accuracy(train_loader, model)
check_accuracy(test_loader, model)